.. meta::
   :description: リーマン幾何学を用いた動作計画法に関する論文.
   :keywords:


=====================================================================
Riemannian Motion Policies
=====================================================================

.. include:: /_include/ref/riemannian_motion_policy.txt

.. contents:: contents
   :depth: 3

Abstract
======================================================================
この論文で提唱されるRiemannian Motion Policyは ``motion generation`` のためのフレームワークである. 対象とする2階微分方程式系(運動方程式)にリーマン計量を取り入れ, motion policy(加速度, あるいはトルク)を生成するということだろう. 様々なmotion policyを組み合わせることができるのがこの手法の強みであるとのこと.

Introduction
======================================================================
ロボットの動作計画の手法は様々なレベルのものが存在しており, そのスペクトルの一端には ``collision-complete`` (障害物と衝突しないグローバルな経路を求めるアルゴリズム)な手法が, もう一端にはローカルに障害物回避のみを行う手法がある. これらの中間には ``motion optimization`` に基づく手法(つまりMPC)があり, 強力な最適化計算を用いて障害物回避と自然な動きを達成している. しかし明らかに, これらの手法の計算複雑性と, 人間がこの種の問題をいとも簡単に解いてみせる様にはギャップがある. 人間の動きは本質的に `reactive` であり, これらの問題を非常に素早く解くことができている(これは ``筆者の意見である``).

人間には簡単でありふれているがここで述べたような動作計画アルゴリズムにとっては非常に困難に **見える** これらの問題が, 実際には以前から思われているよりもずっと簡単であり, 純粋なローカルな障害物回避のみを用いて解くことができるという, のがこの論文の主張. 2000-2010にかけてもローカルな障害物回避のみで解決しようというアプローチはあったが, 障害物回避と目的姿勢への `motion policy` が競合することによって不安定になったり振動を引き起こしていたりしていたらしい.

マニピュレーターを対象としているから, 擬似逆行列を用いた逆キネは比較対象となってくる.

RMPsは, 従来 `motion planning` や `reactive motion` と呼ばれていた手法を, `motion generation` という上位概念で包括しようというものである.

Related Work
======================================================================
擬似逆行列を用いた逆キネとの比較の部分だけここでは触れておく. 擬似逆行列を用いた逆キネではエンドエフェクタにおける位置や力が, 各関節の角度やトルクへと変換されていた. ここで擬似逆行列を用いているのは, 動作計画を行う際のドメイン(手先についてなのか, あるいは関節空間についてなのか)をマッピングする際の計算の簡便さのためだった. その代わりRMPsでは `引き戻し` を用いてドメインの変換を行う.

最適制御理論やMPCは, 各制御入力や状態変数(component)に関するコスト関数を設定し, それらを非線形な目的関数として統合している点において, RMPsと似ているらしい.

Methematics of robot control
======================================================================

Riemannian Motion Policies (RMPs)
======================================================================

Operators
----------------------------------------------------------------------

Properties
----------------------------------------------------------------------

Motion Generation
======================================================================

Combining RMPs to solve motion generation
----------------------------------------------------------------------

Basic local reactive policies
----------------------------------------------------------------------

Integrating computationally intensive behaviors
----------------------------------------------------------------------

Heuristic long-range arm navigation
----------------------------------------------------------------------

Handing joint limits
----------------------------------------------------------------------

